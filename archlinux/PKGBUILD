# Maintainer: ProSpine Admin App
pkgname=prospine-admin-app
pkgver=1.0.0
pkgrel=1
pkgdesc="Electron desktop app for ProSpine Admin Portal"
arch=('x86_64')
url="https://github.com/Sumit7739/prospine-admin-app"
license=('ISC')
depends=('gtk3' 'libxss' 'nss' 'alsa-lib' 'libxrandr' 'libxcomposite' 'libxdamage' 'libxfixes' 'ca-certificates')
makedepends=('npm' 'nodejs')
provides=("$pkgname")
conflicts=("$pkgname")
source=()
md5sums=()

# Get version from package.json automatically
pkgver() {
    cd "$startdir/.."
    node -pe "require('./package.json').version"
}

prepare() {
    cd "$startdir/.."
    
    # Clean any existing builds
    rm -rf dist/
    rm -rf node_modules/
    
    # Install dependencies
    echo "Installing npm dependencies..."
    npm install
}

build() {
    cd "$startdir/.."
    
    # Build the Electron application (unpacked only)
    echo "Building Electron application..."
    npx electron-builder --linux dir
    
    # Verify build was successful
    if [ ! -d "dist/linux-unpacked" ]; then
        error "Build failed: dist/linux-unpacked directory not found"
        return 1
    fi
    
    if [ ! -f "dist/linux-unpacked/$pkgname" ]; then
        error "Build failed: executable not found"
        return 1
    fi
    
    echo "Build completed successfully"
}

package() {
    # Create application directory
    install -dm755 "$pkgdir/opt/$pkgname"
    
    # Copy all application files from build output
    cp -r "$startdir/../dist/linux-unpacked/"* "$pkgdir/opt/$pkgname/"
    
    # Set executable permissions
    chmod +x "$pkgdir/opt/$pkgname/$pkgname"
    
    # Create desktop entry
    install -dm755 "$pkgdir/usr/share/applications"
    cat > "$pkgdir/usr/share/applications/$pkgname.desktop" << EOF
[Desktop Entry]
Name=ProSpine Admin Portal
Comment=Electron desktop app for ProSpine Admin Portal
Exec=/opt/$pkgname/$pkgname
Icon=$pkgname
Terminal=false
Type=Application
Categories=Office;Business;
StartupNotify=true
StartupWMClass=prospine-admin-app
EOF

    # Create symlink for command line access
    install -dm755 "$pkgdir/usr/bin"
    ln -s "/opt/$pkgname/$pkgname" "$pkgdir/usr/bin/$pkgname"
    
    # Install application icon
    if [ -f "$startdir/../icon.png" ]; then
        install -dm755 "$pkgdir/usr/share/icons/hicolor/256x256/apps"
        install -Dm644 "$startdir/../icon.png" "$pkgdir/usr/share/icons/hicolor/256x256/apps/$pkgname.png"
        
        # Also install in other common sizes if we have them
        for size in 16 32 48 64 128 512; do
            if [ -f "$startdir/../icons/${size}x${size}.png" ]; then
                install -dm755 "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps"
                install -Dm644 "$startdir/../icons/${size}x${size}.png" "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/$pkgname.png"
            fi
        done
    fi
    
    # Install license
    if [ -f "$startdir/../LICENSE" ]; then
        install -Dm644 "$startdir/../LICENSE" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
    fi
    
    # Install documentation
    if [ -f "$startdir/../README.md" ]; then
        install -Dm644 "$startdir/../README.md" "$pkgdir/usr/share/doc/$pkgname/README.md"
    fi
}

# Post-install script to update desktop database and icon cache
post_install() {
    echo "Updating desktop database and icon cache..."
    update-desktop-database -q /usr/share/applications 2>/dev/null || true
    gtk-update-icon-cache -q /usr/share/icons/hicolor 2>/dev/null || true
}

# Post-upgrade script
post_upgrade() {
    post_install
}

# Post-remove script to clean up
post_remove() {
    echo "Cleaning up desktop database and icon cache..."
    update-desktop-database -q /usr/share/applications 2>/dev/null || true
    gtk-update-icon-cache -q /usr/share/icons/hicolor 2>/dev/null || true
}
